{"ast":null,"code":"// /** @jsx jsx */\n// import { css, jsx } from '@emotion/react';\n// import { useEffect, useState } from 'react';\n// import { authAPI, endpoints } from '../../configs/APIs';\n// import { Modal, Button, Form } from 'react-bootstrap';\n// import 'bootstrap/dist/css/bootstrap.min.css';\n\n// const ReservationDetailsModal = ({ showModal, handleClose, selectedReservation, setSelectedReservation, handleUpdate, handleDelete }) => {\n//     const [availableRooms, setAvailableRooms] = useState([]);\n\n//     useEffect(() => {\n//         const fetchRooms = async () => {\n//             try {\n//                 const response = await authAPI().get('http://192.168.1.113:8000/rooms/');\n//                 setAvailableRooms(response.data);\n//             } catch (error) {\n//                 console.error('There was an error fetching the rooms!', error);\n//             }\n//         };\n\n//         fetchRooms();\n//     }, []);\n\n//     return (\n//         <Modal show={showModal} onHide={handleClose}>\n//             <Modal.Header closeButton>\n//                 <Modal.Title>Chi tiết Đặt Phòng</Modal.Title>\n//             </Modal.Header>\n//             <Modal.Body>\n//                 {selectedReservation && (\n//                     <Form>\n//                         <Form.Group controlId=\"formReservationId\">\n//                             <Form.Label>ID</Form.Label>\n//                             <Form.Control\n//                                 type=\"text\"\n//                                 value={selectedReservation.id}\n//                                 readOnly\n//                             />\n//                         </Form.Group>\n//                         <Form.Group controlId=\"formGuest\">\n//                             <Form.Label>Khách</Form.Label>\n//                             <Form.Control\n//                                 type=\"text\"\n//                                 value={selectedReservation.guest}\n//                                 readOnly\n//                             />\n//                         </Form.Group>\n//                         <Form.Group controlId=\"formRoom\">\n//                             <Form.Label>Phòng</Form.Label>\n//                             <Form.Select\n//                                 value={selectedReservation.room[0]?.nameRoom || ''}\n//                                 onChange={(e) => setSelectedReservation(prev => ({\n//                                     ...prev,\n//                                     room: availableRooms.filter(room => room.nameRoom === e.target.value)\n//                                 }))}\n//                             >\n//                                 <option value=\"\">Chọn phòng</option>\n//                                 {availableRooms.map(room => (\n//                                     <option key={room.id} value={room.nameRoom}>\n//                                         {room.nameRoom}\n//                                     </option>\n//                                 ))}\n//                             </Form.Select>\n//                         </Form.Group>\n//                         <Form.Group controlId=\"formBookDate\">\n//                             <Form.Label>Ngày đặt</Form.Label>\n//                             <Form.Control\n//                                 type=\"text\"\n//                                 value={selectedReservation.bookDate}\n//                                 onChange={(e) => setSelectedReservation(prev => ({ ...prev, bookDate: e.target.value }))}\n//                             />\n//                         </Form.Group>\n//                         <Form.Group controlId=\"formCheckin\">\n//                             <Form.Label>Nhận phòng</Form.Label>\n//                             <Form.Control\n//                                 type=\"text\"\n//                                 value={selectedReservation.checkin}\n//                                 onChange={(e) => setSelectedReservation(prev => ({ ...prev, checkin: e.target.value }))}\n//                             />\n//                         </Form.Group>\n//                         <Form.Group controlId=\"formCheckout\">\n//                             <Form.Label>Trả phòng</Form.Label>\n//                             <Form.Control\n//                                 type=\"text\"\n//                                 value={selectedReservation.checkout}\n//                                 onChange={(e) => setSelectedReservation(prev => ({ ...prev, checkout: e.target.value }))}\n//                             />\n//                         </Form.Group>\n//                         <Form.Group controlId=\"formActive\">\n//                             <Form.Label>Trạng thái đặt</Form.Label>\n//                             <Form.Check\n//                                 type=\"checkbox\"\n//                                 checked={selectedReservation.statusCheckin}\n//                                 onChange={(e) => setSelectedReservation(prev => ({\n//                                     ...prev,\n//                                     statusCheckin: e.target.checked\n//                                 }))}\n//                             />\n\n//                         </Form.Group>\n//                     </Form>\n//                 )}\n//             </Modal.Body>\n//             <Modal.Footer>\n//                 <Button variant=\"secondary\" onClick={handleClose}>\n//                     Đóng\n//                 </Button>\n//                 <Button variant=\"danger\" onClick={handleDelete}>\n//                     Xóa\n//                 </Button>\n//                 <Button variant=\"primary\" onClick={handleUpdate}>\n//                     Sửa\n//                 </Button>\n//             </Modal.Footer>\n//         </Modal>\n//     );\n// };\n\n// const ManageBookings = () => {\n//     const [reservations, setReservations] = useState([]);\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n//     const [showModal, setShowModal] = useState(false);\n//     const [selectedReservation, setSelectedReservation] = useState(null);\n\n//     const handleShow = (reservation) => {\n//         setSelectedReservation(reservation);\n//         setShowModal(true);\n//     };\n\n//     const handleClose = () => setShowModal(false);\n\n//     // const handleUpdate = async () => {\n//     //     if (!selectedReservation) return;\n\n//     //     // Tạo một bản sao của đối tượng selectedReservation để sửa đổi\n//     //     const updatedReservation = { ...selectedReservation };\n//     //     console.log('Dữ liệu cập nhật:', updatedReservation);\n\n//     //     try {\n//     //         // Gọi API để cập nhật phiếu đặt phòng với giá trị mới của statusCheckin\n//     //         await authAPI().patch(endpoints['update_reservation'](updatedReservation.id), updatedReservation);\n//     //         // Làm mới danh sách phiếu đặt phòng sau khi cập nhật\n//     //         const response = await authAPI().get(endpoints['list_reservations']);\n\n//     //         console.log(\"Kết quả cập nhật\", response.data)\n//     //         setReservations(response.data);\n//     //     } catch (error) {\n//     //         setError('Failed to update reservation');\n//     //         console.error('Failed to update reservation:', error);\n//     //     } finally {\n//     //         handleClose();\n//     //     }\n//     // };\n//     const handleUpdate = async () => {\n//         if (!selectedReservation) return;\n\n//         // Create a copy of the selectedReservation object for modification\n//         const updatedReservation = { ...selectedReservation };\n//         console.log('Data to update:', updatedReservation);\n\n//         try {\n//             // Log the endpoint being called\n//             const updateEndpoint = endpoints['update_reservation'](updatedReservation.id);\n//             console.log('Update endpoint:', updateEndpoint);\n\n//             // Call API to update the reservation with the new statusCheckin value\n//             await authAPI().patch(updateEndpoint, updatedReservation, {\n//                 headers: {\n//                     'Content-Type': 'application/json'\n//                 }\n//             });\n\n//             // Refresh the reservation list after update\n//             const response = await authAPI().get(endpoints['list_reservations']);\n//             console.log('Update result:', response.data);\n//             setReservations(response.data);\n//         } catch (error) {\n//             console.error('Failed to update reservation:', error.response ? error.response.data : error.message);\n//             setError('Failed to update reservation');\n//         } finally {\n//             handleClose();\n//         }\n//     };\n\n//     const handleDelete = async () => {\n//         if (!selectedReservation) return;\n\n//         // Hiển thị hộp thoại xác nhận\n//         const confirmed = window.confirm('Bạn có chắc chắn muốn xóa phiếu đặt phòng này?');\n\n//         if (confirmed) {\n//             try {\n//                 // Gọi API để vô hiệu hóa phiếu đặt phòng\n//                 await authAPI().patch(endpoints['deactivate_reservation'](selectedReservation.id));\n\n//                 // Làm mới danh sách phiếu đặt phòng sau khi vô hiệu hóa\n//                 const response = await authAPI().get(endpoints['list_reservations']);\n//                 setReservations(response.data);\n//             } catch (error) {\n//                 setError('Failed to deactivate reservation');\n//             } finally {\n//                 handleClose();\n//             }\n//         }\n//     };\n\n//     useEffect(() => {\n//         const fetchReservations = async () => {\n//           try {\n//             const response = await authAPI().get(endpoints['list_reservations']);\n//             console.log('Reservations fetched:', response.data); // Kiểm tra dữ liệu nhận được\n//             setReservations(response.data);\n//           } catch (err) {\n//             setError('Failed to fetch reservations');\n//             console.error('Failed to fetch reservations:', err);\n//           } finally {\n//             setLoading(false);\n//           }\n//         };\n\n//         fetchReservations();\n//       }, []);\n\n//     if (loading) return <p>Loading...</p>;\n//     if (error) return <p>{error}</p>;\n\n//     return (\n//         <div css={styles}>\n//             <h1>Quản lý Đặt Phòng</h1>\n//             <table css={tableStyles}>\n//                 <thead>\n//                     <tr>\n//                         <th>ID</th>\n//                         <th>Khách</th>\n//                         <th>Phòng</th>\n//                         <th>Ngày đặt</th>\n//                         <th>Nhận phòng</th>\n//                         <th>Trả phòng</th>\n//                         <th>Trạng thái</th>\n//                         <th>Hành động</th>\n//                     </tr>\n//                 </thead>\n//                 <tbody>\n//                     {reservations.map(reservation => (\n//                         <tr key={reservation.id}>\n//                             <td>{reservation.id}</td>\n//                             <td>{reservation.guest?.name}</td>\n//                             <td>{reservation.room.map(r => r.nameRoom).join(', ')}</td>\n//                             <td>{reservation.bookDate}</td>\n//                             <td>{reservation.checkin}</td>\n//                             <td>{reservation.checkout}</td>\n//                             <td>{reservation.statusCheckin ? 'Đã đặt' : 'Chưa đặt'}</td>\n//                             <td>\n//                                 <Button variant=\"primary\" onClick={() => handleShow(reservation)}>Sửa</Button>\n//                                 {/* <Button variant=\"danger\" onClick={() => handleDelete(reservation)}>Xóa</Button> */}\n//                             </td>\n//                         </tr>\n//                     ))}\n//                 </tbody>\n//             </table>\n//             <ReservationDetailsModal\n//                 showModal={showModal}\n//                 handleClose={handleClose}\n//                 selectedReservation={selectedReservation}\n//                 setSelectedReservation={setSelectedReservation}\n//                 handleUpdate={handleUpdate}\n//                 handleDelete={handleDelete}\n//             />\n//         </div>\n//     );\n// };\n\n// const styles = css`\n//     padding-top: 120px;\n//     background-color: #f4f4f4;\n//     min-height: 100vh;\n\n//     h1 {\n//         color: #0000CD;\n//         text-align: center;\n//         margin-bottom: 20px;\n//     }\n\n//     p {\n//         font-size: 16px;\n//         text-align: center;\n//     }\n// `;\n\n// const tableStyles = css`\n//     width: 100%;\n//     border-collapse: collapse;\n//     margin-top: 20px;\n\n//     th, td {\n//         border: 1px solid #ddd;\n//         padding: 8px;\n//         text-align: left;\n//     }\n\n//     th {\n//         background-color: #0000CD;\n//         color: white;\n//     }\n\n//     tr:nth-of-type(even) {\n//         background-color: #f2f2f2;\n//     }\n\n//     tr:hover {\n//         background-color: #ddd;\n//     }\n\n//     td {\n//         max-width: 150px;\n//         white-space: nowrap;\n//         overflow: hidden;\n//         text-overflow: ellipsis;\n//     }\n// `;\n\n// export default ManageBookings;","map":{"version":3,"names":[],"sources":["D:/WebsiteQLKS_Django_React/react-website/src/components/Staff/ManageBookings.js"],"sourcesContent":["// /** @jsx jsx */\r\n// import { css, jsx } from '@emotion/react';\r\n// import { useEffect, useState } from 'react';\r\n// import { authAPI, endpoints } from '../../configs/APIs';\r\n// import { Modal, Button, Form } from 'react-bootstrap';\r\n// import 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n// const ReservationDetailsModal = ({ showModal, handleClose, selectedReservation, setSelectedReservation, handleUpdate, handleDelete }) => {\r\n//     const [availableRooms, setAvailableRooms] = useState([]);\r\n\r\n//     useEffect(() => {\r\n//         const fetchRooms = async () => {\r\n//             try {\r\n//                 const response = await authAPI().get('http://192.168.1.113:8000/rooms/');\r\n//                 setAvailableRooms(response.data);\r\n//             } catch (error) {\r\n//                 console.error('There was an error fetching the rooms!', error);\r\n//             }\r\n//         };\r\n\r\n//         fetchRooms();\r\n//     }, []);\r\n\r\n//     return (\r\n//         <Modal show={showModal} onHide={handleClose}>\r\n//             <Modal.Header closeButton>\r\n//                 <Modal.Title>Chi tiết Đặt Phòng</Modal.Title>\r\n//             </Modal.Header>\r\n//             <Modal.Body>\r\n//                 {selectedReservation && (\r\n//                     <Form>\r\n//                         <Form.Group controlId=\"formReservationId\">\r\n//                             <Form.Label>ID</Form.Label>\r\n//                             <Form.Control\r\n//                                 type=\"text\"\r\n//                                 value={selectedReservation.id}\r\n//                                 readOnly\r\n//                             />\r\n//                         </Form.Group>\r\n//                         <Form.Group controlId=\"formGuest\">\r\n//                             <Form.Label>Khách</Form.Label>\r\n//                             <Form.Control\r\n//                                 type=\"text\"\r\n//                                 value={selectedReservation.guest}\r\n//                                 readOnly\r\n//                             />\r\n//                         </Form.Group>\r\n//                         <Form.Group controlId=\"formRoom\">\r\n//                             <Form.Label>Phòng</Form.Label>\r\n//                             <Form.Select\r\n//                                 value={selectedReservation.room[0]?.nameRoom || ''}\r\n//                                 onChange={(e) => setSelectedReservation(prev => ({\r\n//                                     ...prev,\r\n//                                     room: availableRooms.filter(room => room.nameRoom === e.target.value)\r\n//                                 }))}\r\n//                             >\r\n//                                 <option value=\"\">Chọn phòng</option>\r\n//                                 {availableRooms.map(room => (\r\n//                                     <option key={room.id} value={room.nameRoom}>\r\n//                                         {room.nameRoom}\r\n//                                     </option>\r\n//                                 ))}\r\n//                             </Form.Select>\r\n//                         </Form.Group>\r\n//                         <Form.Group controlId=\"formBookDate\">\r\n//                             <Form.Label>Ngày đặt</Form.Label>\r\n//                             <Form.Control\r\n//                                 type=\"text\"\r\n//                                 value={selectedReservation.bookDate}\r\n//                                 onChange={(e) => setSelectedReservation(prev => ({ ...prev, bookDate: e.target.value }))}\r\n//                             />\r\n//                         </Form.Group>\r\n//                         <Form.Group controlId=\"formCheckin\">\r\n//                             <Form.Label>Nhận phòng</Form.Label>\r\n//                             <Form.Control\r\n//                                 type=\"text\"\r\n//                                 value={selectedReservation.checkin}\r\n//                                 onChange={(e) => setSelectedReservation(prev => ({ ...prev, checkin: e.target.value }))}\r\n//                             />\r\n//                         </Form.Group>\r\n//                         <Form.Group controlId=\"formCheckout\">\r\n//                             <Form.Label>Trả phòng</Form.Label>\r\n//                             <Form.Control\r\n//                                 type=\"text\"\r\n//                                 value={selectedReservation.checkout}\r\n//                                 onChange={(e) => setSelectedReservation(prev => ({ ...prev, checkout: e.target.value }))}\r\n//                             />\r\n//                         </Form.Group>\r\n//                         <Form.Group controlId=\"formActive\">\r\n//                             <Form.Label>Trạng thái đặt</Form.Label>\r\n//                             <Form.Check\r\n//                                 type=\"checkbox\"\r\n//                                 checked={selectedReservation.statusCheckin}\r\n//                                 onChange={(e) => setSelectedReservation(prev => ({\r\n//                                     ...prev,\r\n//                                     statusCheckin: e.target.checked\r\n//                                 }))}\r\n//                             />\r\n\r\n//                         </Form.Group>\r\n//                     </Form>\r\n//                 )}\r\n//             </Modal.Body>\r\n//             <Modal.Footer>\r\n//                 <Button variant=\"secondary\" onClick={handleClose}>\r\n//                     Đóng\r\n//                 </Button>\r\n//                 <Button variant=\"danger\" onClick={handleDelete}>\r\n//                     Xóa\r\n//                 </Button>\r\n//                 <Button variant=\"primary\" onClick={handleUpdate}>\r\n//                     Sửa\r\n//                 </Button>\r\n//             </Modal.Footer>\r\n//         </Modal>\r\n//     );\r\n// };\r\n\r\n// const ManageBookings = () => {\r\n//     const [reservations, setReservations] = useState([]);\r\n//     const [loading, setLoading] = useState(true);\r\n//     const [error, setError] = useState(null);\r\n//     const [showModal, setShowModal] = useState(false);\r\n//     const [selectedReservation, setSelectedReservation] = useState(null);\r\n\r\n//     const handleShow = (reservation) => {\r\n//         setSelectedReservation(reservation);\r\n//         setShowModal(true);\r\n//     };\r\n\r\n//     const handleClose = () => setShowModal(false);\r\n\r\n//     // const handleUpdate = async () => {\r\n//     //     if (!selectedReservation) return;\r\n\r\n//     //     // Tạo một bản sao của đối tượng selectedReservation để sửa đổi\r\n//     //     const updatedReservation = { ...selectedReservation };\r\n//     //     console.log('Dữ liệu cập nhật:', updatedReservation);\r\n\r\n//     //     try {\r\n//     //         // Gọi API để cập nhật phiếu đặt phòng với giá trị mới của statusCheckin\r\n//     //         await authAPI().patch(endpoints['update_reservation'](updatedReservation.id), updatedReservation);\r\n//     //         // Làm mới danh sách phiếu đặt phòng sau khi cập nhật\r\n//     //         const response = await authAPI().get(endpoints['list_reservations']);\r\n\r\n//     //         console.log(\"Kết quả cập nhật\", response.data)\r\n//     //         setReservations(response.data);\r\n//     //     } catch (error) {\r\n//     //         setError('Failed to update reservation');\r\n//     //         console.error('Failed to update reservation:', error);\r\n//     //     } finally {\r\n//     //         handleClose();\r\n//     //     }\r\n//     // };\r\n//     const handleUpdate = async () => {\r\n//         if (!selectedReservation) return;\r\n    \r\n//         // Create a copy of the selectedReservation object for modification\r\n//         const updatedReservation = { ...selectedReservation };\r\n//         console.log('Data to update:', updatedReservation);\r\n    \r\n//         try {\r\n//             // Log the endpoint being called\r\n//             const updateEndpoint = endpoints['update_reservation'](updatedReservation.id);\r\n//             console.log('Update endpoint:', updateEndpoint);\r\n    \r\n//             // Call API to update the reservation with the new statusCheckin value\r\n//             await authAPI().patch(updateEndpoint, updatedReservation, {\r\n//                 headers: {\r\n//                     'Content-Type': 'application/json'\r\n//                 }\r\n//             });\r\n    \r\n//             // Refresh the reservation list after update\r\n//             const response = await authAPI().get(endpoints['list_reservations']);\r\n//             console.log('Update result:', response.data);\r\n//             setReservations(response.data);\r\n//         } catch (error) {\r\n//             console.error('Failed to update reservation:', error.response ? error.response.data : error.message);\r\n//             setError('Failed to update reservation');\r\n//         } finally {\r\n//             handleClose();\r\n//         }\r\n//     };\r\n    \r\n\r\n\r\n//     const handleDelete = async () => {\r\n//         if (!selectedReservation) return;\r\n    \r\n//         // Hiển thị hộp thoại xác nhận\r\n//         const confirmed = window.confirm('Bạn có chắc chắn muốn xóa phiếu đặt phòng này?');\r\n    \r\n//         if (confirmed) {\r\n//             try {\r\n//                 // Gọi API để vô hiệu hóa phiếu đặt phòng\r\n//                 await authAPI().patch(endpoints['deactivate_reservation'](selectedReservation.id));\r\n    \r\n//                 // Làm mới danh sách phiếu đặt phòng sau khi vô hiệu hóa\r\n//                 const response = await authAPI().get(endpoints['list_reservations']);\r\n//                 setReservations(response.data);\r\n//             } catch (error) {\r\n//                 setError('Failed to deactivate reservation');\r\n//             } finally {\r\n//                 handleClose();\r\n//             }\r\n//         }\r\n//     };\r\n    \r\n\r\n\r\n//     useEffect(() => {\r\n//         const fetchReservations = async () => {\r\n//           try {\r\n//             const response = await authAPI().get(endpoints['list_reservations']);\r\n//             console.log('Reservations fetched:', response.data); // Kiểm tra dữ liệu nhận được\r\n//             setReservations(response.data);\r\n//           } catch (err) {\r\n//             setError('Failed to fetch reservations');\r\n//             console.error('Failed to fetch reservations:', err);\r\n//           } finally {\r\n//             setLoading(false);\r\n//           }\r\n//         };\r\n      \r\n//         fetchReservations();\r\n//       }, []);\r\n\r\n//     if (loading) return <p>Loading...</p>;\r\n//     if (error) return <p>{error}</p>;\r\n\r\n//     return (\r\n//         <div css={styles}>\r\n//             <h1>Quản lý Đặt Phòng</h1>\r\n//             <table css={tableStyles}>\r\n//                 <thead>\r\n//                     <tr>\r\n//                         <th>ID</th>\r\n//                         <th>Khách</th>\r\n//                         <th>Phòng</th>\r\n//                         <th>Ngày đặt</th>\r\n//                         <th>Nhận phòng</th>\r\n//                         <th>Trả phòng</th>\r\n//                         <th>Trạng thái</th>\r\n//                         <th>Hành động</th>\r\n//                     </tr>\r\n//                 </thead>\r\n//                 <tbody>\r\n//                     {reservations.map(reservation => (\r\n//                         <tr key={reservation.id}>\r\n//                             <td>{reservation.id}</td>\r\n//                             <td>{reservation.guest?.name}</td>\r\n//                             <td>{reservation.room.map(r => r.nameRoom).join(', ')}</td>\r\n//                             <td>{reservation.bookDate}</td>\r\n//                             <td>{reservation.checkin}</td>\r\n//                             <td>{reservation.checkout}</td>\r\n//                             <td>{reservation.statusCheckin ? 'Đã đặt' : 'Chưa đặt'}</td>\r\n//                             <td>\r\n//                                 <Button variant=\"primary\" onClick={() => handleShow(reservation)}>Sửa</Button>\r\n//                                 {/* <Button variant=\"danger\" onClick={() => handleDelete(reservation)}>Xóa</Button> */}\r\n//                             </td>\r\n//                         </tr>\r\n//                     ))}\r\n//                 </tbody>\r\n//             </table>\r\n//             <ReservationDetailsModal\r\n//                 showModal={showModal}\r\n//                 handleClose={handleClose}\r\n//                 selectedReservation={selectedReservation}\r\n//                 setSelectedReservation={setSelectedReservation}\r\n//                 handleUpdate={handleUpdate}\r\n//                 handleDelete={handleDelete}\r\n//             />\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// const styles = css`\r\n//     padding-top: 120px;\r\n//     background-color: #f4f4f4;\r\n//     min-height: 100vh;\r\n\r\n//     h1 {\r\n//         color: #0000CD;\r\n//         text-align: center;\r\n//         margin-bottom: 20px;\r\n//     }\r\n\r\n//     p {\r\n//         font-size: 16px;\r\n//         text-align: center;\r\n//     }\r\n// `;\r\n\r\n// const tableStyles = css`\r\n//     width: 100%;\r\n//     border-collapse: collapse;\r\n//     margin-top: 20px;\r\n\r\n//     th, td {\r\n//         border: 1px solid #ddd;\r\n//         padding: 8px;\r\n//         text-align: left;\r\n//     }\r\n\r\n//     th {\r\n//         background-color: #0000CD;\r\n//         color: white;\r\n//     }\r\n\r\n//     tr:nth-of-type(even) {\r\n//         background-color: #f2f2f2;\r\n//     }\r\n\r\n//     tr:hover {\r\n//         background-color: #ddd;\r\n//     }\r\n\r\n//     td {\r\n//         max-width: 150px;\r\n//         white-space: nowrap;\r\n//         overflow: hidden;\r\n//         text-overflow: ellipsis;\r\n//     }\r\n// `;\r\n\r\n// export default ManageBookings;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module"}